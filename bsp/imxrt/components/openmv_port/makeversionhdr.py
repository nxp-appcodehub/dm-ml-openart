"""
Generate header file with macros defining MicroPython version info.
/*
 * Copyright (c) 2006-2018, RT-Thread Development Team
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 */
This script works with Python 2.6, 2.7, 3.3 and 3.4.
"""

from __future__ import print_function

import sys
import os
import datetime
import subprocess
#from tkinter.messagebox import NO

def get_version_info_from_git(wd):
    # Python 2.6 doesn't have check_output, so check for that
    try:
        subprocess.check_output
        subprocess.check_call
    except AttributeError:
        return None

    # Note: git describe doesn't work if no tag is available
    try:
        git_tag = subprocess.check_output(
            ["git", "describe", "--long", "--tags"],
            stderr=subprocess.STDOUT,
            universal_newlines=True,
            cwd=wd
        ).strip()
    except subprocess.CalledProcessError as er:
        #print(er)
        if er.returncode == 128:
            # git exit code of 128 means no repository found
            return None
        git_tag = ""
    except OSError as e:
        #print(e)
        return None
    try:
        git_hash = subprocess.check_output(["git", "rev-parse", "--short", "HEAD"], stderr=subprocess.STDOUT, universal_newlines=True, cwd=wd).strip()
    except subprocess.CalledProcessError:
        git_hash = "unknown"
    except OSError as e:
        #print(e)
        return None

    try:
        # Check if there are any modified files.
        subprocess.check_call(["git", "diff", "--no-ext-diff", "--quiet", "--exit-code"], stderr=subprocess.STDOUT, cwd=wd)
        # Check if there are any staged files.
        subprocess.check_call(["git", "diff-index", "--cached", "--quiet", "HEAD", "--"], stderr=subprocess.STDOUT, cwd=wd)
    except subprocess.CalledProcessError:
        git_hash += "-dirty"
    except OSError:
        return None

    return git_tag, git_hash

def get_version_info_from_docs_conf(path):
    with open(os.path.join(path, "docs", "conf.py")) as f:
        for line in f:
            if line.startswith("version = release = '"):
                ver = line.strip().split(" = ")[2].strip("'")
                git_tag = "v" + ver
                return git_tag, "<no hash>"
    return None

def make_version_header(filename):
    # Get version info using git, with fallback to docs/conf.py
    omv_repo = "../openmv/" if os.path.exists("../openmv/src/micropython") else "../../"

    info = get_version_info_from_git(os.path.join(omv_repo, "src/micropython"))
    if info is None:
        info = get_version_info_from_docs_conf(os.path.join(omv_repo, "src/micropython"))

    mp_git_tag, mp_git_hash = info
    info = get_version_info_from_git(omv_repo)
    if(info is not None):
        omv_git_tag, omv_git_hash = info
    else:
        omv_git_tag = 'V4.3'
        omv_git_hash = "<no hash>"

    omv_git_hash = "<no hash>"
    mp_git_hash = "<no hash>"
    build_date = datetime.date.today()
    if "SOURCE_DATE_EPOCH" in os.environ:
        build_date = datetime.datetime.utcfromtimestamp(
            int(os.environ["SOURCE_DATE_EPOCH"])
        ).date()

    # Generate the file with the git and version info
    file_data = """\
// This file was generated by py/makeversionhdr.py
#define MICROPY_GIT_TAG "%s"
#define MICROPY_GIT_HASH "%s"
#define OPENMV_GIT_TAG "%s"
#define OPENMV_GIT_HASH "%s"
#define MICROPY_BUILD_DATE "%s"
""" % (mp_git_tag, mp_git_hash, omv_git_tag, omv_git_hash, datetime.date.today().strftime("%Y-%m-%d"))

    # Check if the file contents changed from last time
    write_file = True
    if os.path.isfile(filename):
        with open(filename, 'r') as f:
            existing_data = f.read()
        if existing_data == file_data:
            write_file = False

    # Only write the file if we need to
    if write_file:
        print("GEN %s" % filename)
        with open(filename, 'w') as f:
            f.write(file_data)

if __name__ == "__main__":
    make_version_header(sys.argv[1])
